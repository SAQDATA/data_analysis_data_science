import warnings
warnings.filterwarnings("ignore")

import os
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

np.random.seed(0)   # Do not change this value: required to be compatible with solutions generated by the autograder.

def engagement_model():
    rec = None
    
    from sklearn.model_selection import train_test_split
    from sklearn.neighbors import KNeighborsClassifier
    from sklearn.linear_model import LogisticRegression
    from sklearn.svm import SVC
    from sklearn.metrics import roc_auc_score

    training_set = pd.read_csv('assets/train.csv')
    testing_set = pd.read_csv('assets/test.csv')
    X = training_set.iloc[:, 1:-1]
    y = training_set.iloc[:, -1]
    B_test = testing_set.iloc[:, 1:]

    X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=0)

    k_range = range(1,20)
    weights = ['uniform', 'distance']
    p_parameter = [1, 2]
    k_value = 0
    w_value = 0
    p_value = 0
    auc_knn = 0

    for k in k_range:
        for w in weights:
            for p in p_parameter:
                knn = KNeighborsClassifier(n_neighbors=k, weights=w, p=p)
                knn.fit(X_train, y_train)            
                y_scores_knn = knn.predict_proba(X_test)
                if roc_auc_score(y_test, y_scores_knn[:, 1]) > auc_knn:
                    auc_knn = roc_auc_score(y_test, y_scores_knn[:, 1])            
                    k_value = k
                    w_value = w
                    p_value = p                    
    knn_measured = KNeighborsClassifier(n_neighbors=k_value, weights=w_value, p=p_value)
    
    C_log_reg_selection = [0.01, 0.1, 1, 10, 100]
    C_log_reg_value = 0
    auc_log_reg = 0

    for i in C_log_reg_selection:
        log_reg = LogisticRegression(C=i)
        log_reg.fit(X_train, y_train)
        y_scores_lr = log_reg.predict_proba(X_test)
        if roc_auc_score(y_test, y_scores_lr[:, 1]) > auc_log_reg:
            auc_log_reg = roc_auc_score(y_test, y_scores_lr[:, 1])
            C_log_reg_value = i            
    log_reg_measured = LogisticRegression(C=C_log_reg_value)
    log_reg_measured

    C_SVC_selection = [1, 10, 100, 1000]
    gamma_SVC = [0.001, 0.01, 0.1, 1]
    C_SVC_value = 0
    gamma_SVC_value = 0
    auc_SVC = 0

    for i in C_SVC_selection:    
        for g in gamma_SVC:        
            svm = SVC(C=i, gamma=g, probability=True)
            svm.fit(X_train, y_train)
            y_scores = svm.predict_proba(X_test)
            if roc_auc_score(y_test, y_scores[:, 1]) > auc_SVC:
                auc_SVC = roc_auc_score(y_test, y_scores[:, 1])
                C_SVC_value = i            
                gamma_SVC_value = g
           
    svm_measured = SVC(C=C_SVC_value, gamma=gamma_SVC_value, probability=True)

    auc_overall = 0
    model_tb_used = 0
    if auc_knn > auc_overall:
        auc_overall = auc_knn
        model_tb_used = knn_measured

    if auc_log_reg > auc_overall:
        auc_overall = auc_log_reg
        model_tb_used = log_reg_measured

    if auc_SVC > auc_overall:
        auc_overall = auc_SVC
        model_tb_used = svm_measured

    rec = pd.Series(model_tb_used.fit(X_train, y_train).predict_proba(B_test)[:,1], index=testing_set['id'])
    #raise NotImplementedError()
    
    return rec

engagement_model()
